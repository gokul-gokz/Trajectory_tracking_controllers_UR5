% ANALYTICAL_JACOBIAN Calculate the analytical Jacobian of the UR5.
clc, clear all, close all

syms theta_1 theta_2 theta_3 theta_4 theta_5 theta_6;
syms theta phi psi;

%% Geometrical Jacobian
J(theta_1, theta_2, theta_3, theta_4, theta_5, theta_6) = ...
    [(109*cos(theta_1))/1000 + (41*cos(theta_1)*cos(theta_5))/500 + ...
        (17*cos(theta_2)*sin(theta_1))/40 - ...
        (93*cos(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2)))/1000 + ...
        (93*sin(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1)))/1000 - ...
        (41*sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1)) + ...
        sin(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2))))/500 - ...
        (39243*sin(theta_1)*sin(theta_2)*sin(theta_3))/100000 + ...
        (39243*cos(theta_2)*cos(theta_3)*sin(theta_1))/100000, ...
        ...
        (17*cos(theta_1)*sin(theta_2))/40 - ...
        (93*cos(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3)))/1000 - ...
        (93*sin(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2)))/1000 + ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2)) - ...
        sin(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3))))/500 + ...
        (39243*cos(theta_1)*cos(theta_2)*sin(theta_3))/100000 + ...
        (39243*cos(theta_1)*cos(theta_3)*sin(theta_2))/100000, ...
        ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2)) - ...
        sin(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3))))/500 - ...
        (93*sin(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2)))/1000 - ...
        (93*cos(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3)))/1000 + ...
        (39243*cos(theta_1)*cos(theta_2)*sin(theta_3))/100000 + ...
        (39243*cos(theta_1)*cos(theta_3)*sin(theta_2))/100000, ...
        ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2)) - ...
        sin(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3))))/500 - ...
        (93*sin(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2)))/1000 - ...
        (93*cos(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3)))/1000, ...
        ...
        (41*cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3)) + ...
        sin(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2))))/500 - ...
        (41*sin(theta_1)*sin(theta_5))/500,... 
        ...
        0; ...
   (109*sin(theta_1))/1000 - (17*cos(theta_1)*cos(theta_2))/40 + ...
        (41*cos(theta_5)*sin(theta_1))/500 + ...
        (93*cos(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2)))/1000 - ...
        (93*sin(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ... 
        cos(theta_1)*cos(theta_2)*cos(theta_3)))/1000 + ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3)) + ...
        sin(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2))))/500 + ...
        (39243*cos(theta_1)*sin(theta_2)*sin(theta_3))/100000 - ...
        (39243*cos(theta_1)*cos(theta_2)*cos(theta_3))/100000, ...
        ...
        (17*sin(theta_1)*sin(theta_2))/40 - ...
        (93*cos(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1)))/1000 - ...
        (93*sin(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2)))/1000 + ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2)) - ...
        sin(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1))))/500 + ...
        (39243*cos(theta_2)*sin(theta_1)*sin(theta_3))/100000 + ...
        (39243*cos(theta_3)*sin(theta_1)*sin(theta_2))/100000, ...
        ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2)) - ...
        sin(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1))))/500 - ...
        (93*sin(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2)))/1000 - ...
        (93*cos(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1)))/1000 + ...
        (39243*cos(theta_2)*sin(theta_1)*sin(theta_3))/100000 + ...
        (39243*cos(theta_3)*sin(theta_1)*sin(theta_2))/100000, ...
        ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2)) - ...
        sin(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1))))/500 - ...
        (93*sin(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2)))/1000 - ...
        (93*cos(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1)))/1000, ...
        ...
        (41*cos(theta_1)*sin(theta_5))/500 + ...
        (41*cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1)) + ...
        sin(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2))))/500, ...
        ...
        0; ...
    0, ...
        ...
        (39243*sin(theta_2)*sin(theta_3))/100000 - ...
        (39243*cos(theta_2)*cos(theta_3))/100000 - ...
        (17*cos(theta_2))/40 - ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_2)*cos(theta_3) - ...
        sin(theta_2)*sin(theta_3)) - sin(theta_4)*(cos(theta_2)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_2))))/500 + ...
        (93*cos(theta_4)*(cos(theta_2)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_2)))/1000 + ...
        (93*sin(theta_4)*(cos(theta_2)*cos(theta_3) - sin(theta_2)*sin(theta_3)))/1000,...
        ...
        (39243*sin(theta_2)*sin(theta_3))/100000 - ...
        (39243*cos(theta_2)*cos(theta_3))/100000 - ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_2)*cos(theta_3) - ...
        sin(theta_2)*sin(theta_3)) - sin(theta_4)*(cos(theta_2)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_2))))/500 + (93*cos(theta_4)*(cos(theta_2)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_2)))/1000 + (93*sin(theta_4)*(cos(theta_2)*cos(theta_3) - ...
        sin(theta_2)*sin(theta_3)))/1000, ...
        ...
        (93*cos(theta_4)*(cos(theta_2)*sin(theta_3) + cos(theta_3)*sin(theta_2)))/1000 - ...
        (41*sin(theta_5)*(cos(theta_4)*(cos(theta_2)*cos(theta_3) - ...
        sin(theta_2)*sin(theta_3)) - sin(theta_4)*(cos(theta_2)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_2))))/500 + (93*sin(theta_4)*(cos(theta_2)*cos(theta_3) - ...
        sin(theta_2)*sin(theta_3)))/1000,  ...
        ...
        -(41*cos(theta_5)*(cos(theta_4)*(cos(theta_2)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_2)) + sin(theta_4)*(cos(theta_2)*cos(theta_3) - ...
        sin(theta_2)*sin(theta_3))))/500,  ...
        ...
        0; ...
    0, ...
        ...
        sin(theta_1), ...
        ...
        sin(theta_1), ...
        ...
        sin(theta_1), ...
        ...
        cos(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2)) - ...
        sin(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3)), ...
        ...
        cos(theta_5)*sin(theta_1) + ...
        sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_1)*cos(theta_2)*cos(theta_3)) + ...
        sin(theta_4)*(cos(theta_1)*cos(theta_2)*sin(theta_3) + ...
        cos(theta_1)*cos(theta_3)*sin(theta_2)));...
    0, ...
        ...
        -cos(theta_1), ...
        ...
        -cos(theta_1), ...
        ...
        -cos(theta_1), ...
        ...
        cos(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2)) - ...
        sin(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1)), ...
        ...
        sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_2)*sin(theta_3) - ...
        cos(theta_2)*cos(theta_3)*sin(theta_1)) + ...
        sin(theta_4)*(cos(theta_2)*sin(theta_1)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_1)*sin(theta_2))) - cos(theta_1)*cos(theta_5);
    1, ...
        ...
        0, ...
        ...
        0, ...
        ...
        0, ...
        ...
        sin(theta_4)*(cos(theta_2)*sin(theta_3) + cos(theta_3)*sin(theta_2)) - ...
        cos(theta_4)*(cos(theta_2)*cos(theta_3) - sin(theta_2)*sin(theta_3)),...
        ...
        -sin(theta_5)*(cos(theta_4)*(cos(theta_2)*sin(theta_3) + ...
        cos(theta_3)*sin(theta_2)) + sin(theta_4)*(cos(theta_2)*cos(theta_3) - ...
        sin(theta_2)*sin(theta_3)));];

%% Analytical Jacobian
B_alpha = [cos(psi)*sin(theta), -sin(psi), 0; ...
           sin(psi)*sin(theta), cos(psi), 0; ...
           cos(theta), 0, 1];
Transf = [eye(3,3), zeros(3,3); zeros(3,3), inv(B_alpha)];
J_a(theta_1, theta_2, theta_3, theta_4, theta_5, theta_6) = Transf*J

%%

J_a_f = matlabFunction(J_a, 'File','computeJa','Vars',{[theta_1; theta_2; theta_3; theta_4; theta_5; theta_6], [theta; phi; psi]});
